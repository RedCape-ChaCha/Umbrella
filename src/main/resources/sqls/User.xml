<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.rainbow.um.model.IUserDao">

	<!-- 로그인  -->
	<select id="userLogin" parameterType="UserDto" resultType="UserDto">
		SELECT USER_NUMBER, USER_EMAIL, USER_DELFLAG, USER_REGDATE, USER_MILEAGE, USER_GRADE, USER_API
			FROM USERINFO
				WHERE USER_EMAIL=#{user_email} AND USER_PASSWORD=#{user_password} AND
					USER_DELFLAG='N' AND USER_API='L'
	</select>
	
	<!--API 로그인  -->
	<select id="apiLogin" parameterType="UserDto" resultType="UserDto">
		SELECT USER_NUMBER, USER_EMAIL, USER_PHONE, USER_MILEAGE, USER_GRADE
		FROM USERINFO
		WHERE USER_EMAIL=#{user_email} AND USER_API ='K' AND USER_DELFLAG =
		'N'
	</select>

	<!-- 비밀번호 수정  -->
	<update id="pwUpdate">
		UPDATE USERINFO SET USER_PASSWORD=#{user_password} WHERE USER_NUMBER = #{user_number}
	</update>
	
	<!-- 일반회원가입  -->
	<insert id="userInsert" parameterType="UserDto">
		INSERT INTO USERINFO
		(USER_EMAIL, USER_PASSWORD, USER_PHONE, USER_ZIP,USER_ADDRESS, USER_DETAIL,USER_DELFLAG, USER_REGDATE,
		USER_MILEAGE, USER_GRADE, USER_API)
		VALUES(#{user_email}, #{user_password}, #{user_phone}, #{user_zip},#{user_address}, #{user_detail},'N', NOW(), 0, 'U', 'L')		
	</insert>
	
	<!-- API 회원가입  -->
	<select id="apiInsert">
		INSERT INTO USERINFO
		(USER_EMAIL,USER_PASSWORD, USER_PHONE,USER_ADDRESS, USER_DETAIL,USER_DELFLAG, USER_REGDATE, USER_MILEAGE, USER_GRADE, USER_API)
		VALUES(#{user_email}, #{user_password}, #{user_phone}, #{user_address}, #{user_detail}, 'N', NOW(), 0, 'U', 'K')
	</select>
	
	<!-- 이메일 중복체크  -->
	<select id="emailChk" parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT COUNT(USER_EMAIL) FROM USERINFO WHERE USER_EMAIL=#{user_email}		
	</select>
	
	<!-- 전체회원조회(관리자)  -->
	<select id="allUserList" resultType="UserDto">
		SELECT USER_NUMBER, USER_EMAIL, USER_DELFLAG,USER_ZIP,USER_DETAIL,
		USER_PHONE, USER_ADDRESS, USER_REGDATE, USER_MILEAGE, USER_GRADE,
		USER_API
		FROM USERINFO		
	</select>
	
	<!-- 회원상세조회  -->
	<select id="userSelect" parameterType="java.util.Map"
      resultType="UserDto">
		SELECT USER_NUMBER, USER_EMAIL, USER_PASSWORD, USER_DELFLAG, USER_PHONE,USER_ZIP,
		USER_ADDRESS, USER_DETAIL,USER_REGDATE, USER_MILEAGE, USER_GRADE, USER_API
		FROM USERINFO
		WHERE USER_EMAIL =#{user_email}
	</select>
	
	<!-- 회원상세조회 대출중 도서 -->
	<select id="userSelectLoan" parameterType="java.lang.String" resultType="LoanListDto">
		SELECT BOOK_NAME, LOAN_DATE , DATE_ADD(LOAN_DATE, INTERVAL 7 DAY) AS RETURN_DATE FROM BOOK JOIN (SELECT * FROM BOOK_CONDITION
		JOIN LOANLIST USING(BOOK_ASEQ)
		WHERE USER_NUMBER = #{user_number} AND RETURN_CHECK = 'N')A USING (BOOK_CSEQ)
	</select>
	
	<!-- 회원상세조회 예약 중 도서  -->
	<select id="userSelectResv" parameterType="java.lang.String" resultType="ResvDto">
		SELECT RESV_SEQ, BOOK_NAME, DATE_FORMAT(RESV_DATE, '%Y-%c-%e %h:%i') AS RESV_DATE, MILG_CHECK FROM BOOK JOIN RESVLIST
		USING(BOOK_CSEQ) WHERE LOAN_CHECK = 'N' AND USER_NUMBER = #{user_number}
	</select>
	
	<!-- 회원상세조회 웹대출 신청 도서 -->
	<select id="userSelectWeb" parameterType="java.lang.String" resultType="ApplyDto">
		SELECT APPLY_SEQ, BOOK_NAME, DATE_FORMAT(APPLY_DATE, '%Y-%c-%e %h:%i') AS APPLY_DATE  FROM LOANAPPLY JOIN BOOK USING(BOOK_CSEQ) WHERE USER_NUMBER = #{user_number} AND APPLY_CHECK = 'N'
	</select>
	
	<!-- 빌렸던 도서 이력 -->
	<select id="userSelectHistory" parameterType="java.util.Map" resultType="LoanListDto">
		SELECT LOAN_DATE, RETURN_DATE, BOOK_NAME FROM LOANLIST JOIN (SELECT * FROM BOOK JOIN BOOK_CONDITION USING (BOOK_CSEQ))A USING (BOOK_ASEQ) 
		WHERE USER_NUMBER = #{user_number} AND RETURN_CHECK = 'Y' 
		ORDER BY LOAN_DATE DESC LIMIT #{start_index}, 10
	</select>

	<!-- 개인정보 수정 -->
	<update id="userUpdate" parameterType="UserDto">
		UPDATE USERINFO SET USER_PHONE=#{user_phone},USER_ZIP=#{user_zip},
		USER_DETAIL=#{user_detail},USER_ADDRESS=#{user_address}
		WHERE USER_EMAIL =#{user_email}
	</update>

	<!-- 회원권한 수정(관리자) -->
	<update id="userUpdateGrade" parameterType="java.util.Map">
		UPDATE USERINFO SET USER_GRADE=#{user_grade}
		WHERE USER_EMAIL=#{user_email}
	</update>
	
	<!-- 회원 탈퇴 -->
	<update id="userUpdateDel" parameterType="java.lang.String">
		UPDATE USERINFO SET USER_DELFLAG='Y'
		WHERE USER_EMAIL =#{user_email}
	</update>

	<!--//결제 성공시 결제 정보 추가//-->
	<insert id="pay" parameterType="PayDto">
		INSERT INTO PAYLIST(USER_NUMBER, PAY_TOKEN, PAY_AMOUNT, PAY_TYPE, PAY_DATE) VALUES(#{user_number},#{pay_token},#{pay_amount},#{pay_type}, NOW())
	</insert>

	<!--//환불 전 마일리지 잔액 체크//-->	
	<select id="checkMilg" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT USER_MILEAGE FROM USERINFO WHERE USER_NUMBER = #{user_number}
	</select>

	<!--//환불시 환불 정보 추가//-->
	<insert id="refund" parameterType="java.lang.String">
		INSERT INTO REFUNDLIST(PAY_SEQ, REFUND_DATE) VALUES(#{pay_seq}, NOW())
	</insert>
	
	<!--//마일리지 잔액 조정//-->
	<update id="milgControll" parameterType="java.util.Map">
		UPDATE USERINFO SET USER_MILEAGE = USER_MILEAGE + #{amount} WHERE USER_NUMBER = #{user_number}
	</update>
	
	<!--//결제 리스트 조회//-->
	<select id="selectPaylist" parameterType="PayListDto" resultType="PayDto">
		SELECT PAY_SEQ, PAY_TYPE, PAY_AMOUNT, PAY_DATE, REFUND_DATE AS REFUND FROM PAYLIST LEFT JOIN REFUNDLIST USING(PAY_SEQ)
			<where>
				<if test="user_number != null">
					USER_NUMBER = #{user_number}
				</if>
				<if test="pay_start_date != null">
					AND PAY_DATE BETWEEN #{pay_start_date} AND #{pay_end_date}
				</if>
				<if test="refund_start_date != null">
					AND REFUND_DATE BETWEEN #{refund_start_date} AND #{pay_end_date}
				</if>
			</where>
			LIMIT #{start_index},10
	</select>
	
	<select id="countPayList" parameterType="PayListDto" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM REFUND	JOIN REFUNDLIST USING(PAY_SEQ)
			<where>
				<if test="user_number != null">
					USER_NUMBER = #{user_number}
				</if>
				<if test="pay_start_date != null">
					AND PAY_DATE BETWEEN #{pay_start_date} AND #{pay_end_date}
				</if>
				<if test="refund_start_date != null">
					AND REFUND_DATE BETWEEN #{refund_start_date} AND #{pay_end_date}
				</if>
			</where>
	</select>
	
</mapper>
