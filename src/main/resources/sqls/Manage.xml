<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.rainbow.um.model.IManageDao">

	<!--//해당 회원의 대출중인 도서의 수 확인//-->
	<select id="loanSelectCount" parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM LOANLIST WHERE RETURN_CHECK = 'N' AND USER_NUMBER = #{user_number}
	</select>
	
	<!--//해당 회원의 예약중인 도서의 수 확인//-->
	<select id="resvSelectCount" parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM RESVLIST WHERE LOAN_CHECK = 'N' AND USER_NUMBER = #{user_number}
	</select>
	
	<!--//해당 회원이 연체중인지 확인//-->
	<select id="overChk" parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM OVERLIST WHERE USER_NUMBER = #{user_number} AND DATE_ADD(OVER_START, INTERVAL OVER_COUNT DAY) > NOW()
	</select>
	
	<!--//대출 등록//-->
	<insert id="loanInsert" parameterType="java.util.Map">
		INSERT INTO LOANLIST (USER_NUMBER, BOOK_ASEQ, LOAN_DATE, RETURN_CHECK)
			VALUES(#{user_number},#{book_aseq},NOW(),'N')
	</insert>
	
	<!--//해당 도서의 대출 상태 확인 (예약 하기 위한)//-->
	<select id="bookChkBorrow" parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM BOOK JOIN BOOK_CONDITION USING (BOOK_CSEQ) WHERE BOOK_CSEQ = #{book_cseq} AND CONDITION_BORROW = 'N'
	</select>
	
	<!--//회원의 특정도서 대출,예약 상태 확인//-->
	<select id="userChkBorrowBook" parameterType="java.util.Map" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM(
			SELECT USER_NUMBER FROM LOANLIST JOIN (SELECT * FROM BOOK_CONDITION JOIN BOOK USING (BOOK_CSEQ) WHERE BOOK_CSEQ = #{book_cseq})A USING (BOOK_ASEQ) WHERE USER_NUMBER = #{user_number} AND RETURN_CHECK = 'N'
			UNION ALL
			SELECT USER_NUMBER FROM RESVLIST JOIN BOOK USING(BOOK_CSEQ) WHERE BOOK_CSEQ = #{book_cseq} AND USER_NUMBER = #{user_number} AND LOAN_CHECK = 'N')A
	</select>
	
	<!--//예약 등록//-->
	<insert id="resvInsertNomal" parameterType="java.util.Map">
		INSERT INTO RESVLIST (USER_NUMBER, BOOK_CSEQ, STEP, MILG_CHECK, RESV_DATE, LOAN_CHECK)
			VALUES(#{user_number},#{book_cseq},(SELECT IFNULL(STEP,0)+1 FROM (SELECT MAX(STEP) AS STEP FROM RESVLIST WHERE BOOK_CSEQ = 1 AND LOAN_CHECK IN ('Y','N')) A), 'N', NOW(), 'N')
	</insert>
	
	<!--//마일리지 확인//-->
	<select id="mileageChk" parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT USER_MILEAGE FROM USERINFO WHERE USER_NUMBER = #{user_number}
	</select>
	
	<!--//마일리지 예약 등록 전 타 예약 상태 수정 //-->
	<update id="resvUpdateStepMileage" parameterType="java.lang.String">
		UPDATE RESVLIST SET STEP = STEP+1 WHERE MILG_CHECK = 'N' AND BOOK_CSEQ = #{book_cseq}
	</update>
	
	<!--//마일리지 예약 등록//-->
	<insert id="resvInsertMileage" parameterType="java.util.Map">
		INSERT INTO RESVLIST (USER_NUMBER, BOOK_CSEQ, STEP, MILG_CHECK, RESV_DATE, LOAN_CHECK) 
		        VALUES(#{user_number},#{book_cseq},(SELECT IFNULL(STEP,0)+1 FROM (SELECT MAX(STEP) AS STEP FROM RESVLIST 
		                              WHERE BOOK_CSEQ = 1 AND MILG_CHECK = 'Y')A), 'Y', NOW(), 'N')
	</insert>
	
	<!--//예약 취소 전 타 예약 상태 수정//-->
	<update id="resvUpdateStepCancle" parameterType="java.lang.String">
		UPDATE RESVLIST SET STEP = STEP-1 WHERE BOOK_CSEQ = (SELECT BOOK_CSEQ FROM (SELECT BOOK_CSEQ 
			FROM RESVLIST WHERE RESV_SEQ = #{resv_seq})A) AND STEP > (SELECT STEP FROM (SELECT STEP FROM RESVLIST WHERE RESV_SEQ = #{resv_seq})B)
	</update>
	
	<!--//예약 취소//-->
	<update id="resvUpdateCancle" parameterType="java.lang.String">
		UPDATE RESVLIST SET LOAN_CHECK = 'C' WHERE RESV_SEQ = #{resv_seq}
	</update>
	
	<!--//도서 반납으로 인한 상태 변경//-->
	<update id="conditionUpdateCancle" parameterType="java.lang.String">
		UPDATE BOOK_CONDITION SET CONDITION_BORROW = 'N' WHERE BOOK_ASEQ = #{book_aseq}
	</update>
	
	<!--//도서 반납으로 인한 대출 리스트 수정//-->
	<update id="loanUpdateReturnChk" parameterType="java.util.Map">
		UPDATE LOANLIST SET RETURN_CHECK = 'Y' , RETURN_DATE = NOW() WHERE USER_NUMBER = #{user_number} AND BOOK_ASEQ = #{book_aseq} AND RETURN_CHECK = 'N'
	</update>
	
	<!--//연체 등록//-->
	<insert id="overInset" parameterType="java.util.Map">
		INSERT INTO OVERLIST (USER_NUMBER, OVER_START, OVER_COUNT)
			VALUES(#{user_number},NOW(), #{over_count})
	</insert>
	
	<!--//기존에 연체가 존재할 시 연체리스트 수정//-->
	<update id="overUpdate" parameterType="java.util.Map">
		UPDATE OVERLIST SET OVER_COUNT = OVER_COUNT + #{over_count} WHERE USER_NUMBER = #{user_number} 
			AND DATE_ADD(OVER_START, INTERVAL OVER_COUNT DAY) > NOW()
	</update>
	
	<!--//반납 후 해당 도서가 예약된 도서인지 확인//-->
	<select id="resvChkBook" parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM RESVLIST WHERE BOOK_CSEQ = (SELECT BOOK_CSEQ FROM BOOK JOIN BOOK_CONDITION USING(BOOK_CSEQ) WHERE BOOK_ASEQ = #{book_aseq}) AND LOAN_CHECK = 'N'
	</select>
	
	<!--//예약 도서 대출 전 스탭 수정//-->
	<update id="resvUpdateStepBorrow" parameterType="java.lang.String">
		UPDATE RESVLIST SET STEP = STEP-1 WHERE BOOK_CSEQ = (SELECT BOOK_CSEQ FROM BOOK JOIN BOOK_CONDITION USING(BOOK_CSEQ) WHERE BOOK_ASEQ = #{book_aseq}) AND LOAN_CHECK = 'N' AND STEP > 0
	</update>
	
	<!--//예약 될 도서 수정//-->
	<update id="resvUpdateStepFirst" parameterType="java.lang.String">
		UPDATE RESVLIST SET LOAN_CHECK = 'Y' WHERE BOOK_CSEQ = #{book_cseq} AND STEP = 0 AND LOAN_CHECK = 'N'
	</update>
	
	<!--//웹 대출 신청//-->
	<insert id="applyInsert" parameterType="java.util.Map">
		INSERT INTO LOANAPPLY (USER_NUMBER, BOOK_CSEQ, APPLY_CHECK, APPLY_DATE) VALUES (#{user_number},#{book_cseq},'N', NOW())
	</insert>
	
	<!--//웹 대출 취소//-->
	<update id="applyUpdate" parameterType="java.util.Map">
		UPDATE LOANAPPLY SET APPLY_CHECK = #{apply_check} WHERE APPLY_SEQ = #{apply_seq}
	</update>
	
	<!--//반납일 넘었는지 확인//-->
	<select id="overDateChk" parameterType="java.util.Map" resultType="java.lang.Integer">
		<![CDATA[SELECT DATEDIFF(NOW(), DATE_ADD(LOAN_DATE, INTERVAL 7 DAY)) FROM LOANLIST WHERE DATE_ADD(LOAN_DATE, INTERVAL 8 DAY) < NOW() AND USER_NUMBER = #{user_number} AND BOOK_ASEQ = #{book_aseq} AND RETURN_CHECK = 'N']]>
	</select>
	
	<select id="chkUser" parameterType="java.util.Map" resultType="ResvUserDto">
		SELECT USER_PHONE, BOOK_NAME FROM (SELECT USER_PHONE, BOOK_CSEQ FROM USERINFO JOIN RESVLIST USING (USER_NUMBER) WHERE BOOK_CSEQ = (SELECT BOOK_CSEQ FROM BOOK JOIN BOOK_CONDITION USING (BOOK_CSEQ) WHERE BOOK_ASEQ = #{book_aseq}) AND USER_NUMBER = #{user_number} AND STEP = 1)A JOIN BOOK USING (BOOK_CSEQ);
	</select>
	
	<select id="applyChk" parameterType="java.util.Map" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM LOANAPPLY WHERE USER_NUMBER = #{user_number} AND BOOK_CSEQ = #{book_cseq} AND APPLY_CHECK = 'N'
	</select>
	
	<select id="applyCount" parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM LOANAPPLY WHERE USER_NUMBER = #{user_number} AND APPLY_CHECK = 'N'
	</select>
	
	<update id="milgDedcution" parameterType="java.lang.String">
		UPDATE USERINFO SET USER_MILEAGE = USER_MILEAGE - 300 WHERE USER_NUMBER = #{user_number}
	</update>
	
	<select id="countSelectApply" parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM LOANAPPLY WHERE USER_NUMBER = #{user_number} AND APPLY_CHECK = 'N'
	</select>
	
	<select id="countSelectHistory" parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM LOANLIST WHERE USER_NUMBER = #{user_number} AND RETURN_CHECK = 'Y'
	</select>
	
	<select id="comResv" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT USER_NUMBER FROM RESVLIST WHERE RESV_SEQ = #{resv_seq}
	</select>
	
	<select id="comApply" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT USER_NUMBER FROM LOANAPPLY WHERE APPLY_SEQ = #{apply_seq}
	</select>
	
	<!--//이전 웹 대출 신청정보 조회//-->
	<select id="lastWebHistory" parameterType="java.lang.String" resultType="ApplyDto">
		SELECT APPLY_SEQ, BOOK_NAME, DATE_FORMAT(APPLY_DATE, '%Y-%c-%e %h:%i') AS APPLY_DATE, APPLY_CHECK  FROM LOANAPPLY JOIN BOOK USING(BOOK_CSEQ) WHERE USER_NUMBER = #{user_number} AND APPLY_CHECK IN ('Y', 'C', 'U') ORDER BY APPLY_DATE DESC LIMIT 0,10
	</select>
	
	<!-- 대출번호로 회원 아이디와 책정보를 조회 -->
	<select id="selectLoanInfo" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT USER_NUMBER FROM LOANLIST WHERE BOOK_ASEQ = #{book_aseq} AND RETURN_CHECK = 'N'
	</select>
	
	<select id="getNumber" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT USER_NUMBER FROM USERINFO WHERE USER_EMAIL = #{user_email}
	</select>
	
	<select id="getNumberApply" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT USER_NUMBER FROM LOANAPPLY WHERE APPLY_SEQ = #{apply_seq}
	</select>
	
	<!--//토스 결제번호//-->
	<select id="tossOrderNo" resultType="java.lang.String">
		SELECT MAX(PAY_SEQ)+1 AS PAY_SEQ FROM PAYLIST
	</select>
	
	<!--//토스 결제 저장//-->
	<insert id="insertToss" parameterType="java.util.Map">
		INSERT INTO PAYLIST (USER_NUMBER, PAY_AMOUNT, PAY_TOKEN) VALUES (#{user_number}, #{pay_amount}, #{pay_token})
	</insert>
	
	<update id="updateToss" parameterType="java.util.Map">
		UPDATE PAYLIST SET PAY_TYPE = #{pay_type}, PAY_DATE = NOW() WHERE PAY_SEQ = #{pay_seq}
	</update>
	
	<!--//마일리지 잔액 조정//-->
	<update id="milgControll" parameterType="java.util.Map">
		UPDATE USERINFO SET USER_MILEAGE = USER_MILEAGE + #{amount} WHERE USER_NUMBER = #{user_number}
	</update>
	
	<select id="getMilege" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT USER_MILEAGE FROM USERINFO WHERE USER_NUMBER = #{user_number}
	</select>
	
	<select id="getAmount" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT PAY_AMOUNT FROM PAYLIST WHERE PAY_SEQ = #{pay_seq}
	</select>
	
	<insert id="InsertMilgHistory" parameterType="java.util.Map">
		INSERT INTO USEMILG (USER_NUMBER, MILG_AMOUNT, REMAIN_MILG, MILG_TIME) VALUES (#{user_number},#{amount}, (SELECT USER_MILEAGE FROM USERINFO WHERE USER_NUMBER = #{user_number}),NOW())
	</insert>
	
	<select id="SelectMilgHistory" parameterType="java.util.Map" resultType="MilgHistory">
		SELECT MILG_AMOUNT, REMAIN_MILG, DATE_FORMAT(MILG_TIME, '%Y-%c-%e %H:%i') AS MILG_TIME FROM USEMILG WHERE USER_NUMBER = #{user_number} ORDER BY MILG_SEQ DESC LIMIT #{start_index},10
	</select>
	
	<select id="SelectPayList" parameterType="java.util.Map" resultType="PayDto">
		SELECT PAY_SEQ, PAY_TYPE, PAY_AMOUNT, DATE_FORMAT(PAY_DATE, '%Y-%c-%e %H:%i') AS PAY_DATE, DATE_FORMAT(REFUND_DATE, '%Y-%c-%e %H:%i') AS REFUND_DATE FROM PAYLIST LEFT JOIN REFUNDLIST USING(PAY_SEQ) WHERE USER_NUMBER = #{user_number} GROUP BY PAY_SEQ ORDER BY PAY_DATE DESC LIMIT #{start_index},10
	</select>
	
	<select id="SelectPayToken" parameterType="java.util.Map" resultType="java.lang.String">
		SELECT PAY_TOKEN FROM PAYLIST WHERE USER_NUMBER = #{user_number} AND PAY_SEQ = #{pay_seq}	
	</select>
	
	<insert id="insertRefund" parameterType="java.lang.String">
		INSERT INTO REFUNDLIST (PAY_SEQ, REFUND_DATE) VALUES (#{pay_seq}, NOW())
	</insert>
	
	<select id="countUseMilg" parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM USEMILG WHERE USER_NUMBER = #{user_number}
	</select>
	
	<select id="countPaylist" parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM PAYLIST WHERE USER_NUMBER = #{user_number}
	</select>
	
	<select id="chkLoanlist" parameterType="java.lang.String" resultType="java.lang.Integer">
		<![CDATA[SELECT COUNT(*) FROM LOANLIST WHERE USER_NUMBER = #{user_number} AND DATE_ADD(LOAN_DATE, INTERVAL 8 DAY) < NOW() AND RETURN_CHECK = 'N']]>
	</select>
	
	<select id="webApplyCountChk" parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM BOOK_CONDITION WHERE CONDITION_BORROW = 'N' AND BOOK_CSEQ = #{book_cseq}
	</select>
</mapper>
